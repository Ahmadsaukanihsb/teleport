local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")

-- CONFIGURATION
local UPDATE_INSTANCE_URL = "https://backend-vercel-ashy.vercel.app/instance.js"
local GET_LATEST_INSTANCE_URL = "https://backend-vercel-ashy.vercel.app/join.js"
local CHECK_INTERVAL = 15 -- detik cek instance terbaru
local DEBUG_MODE = true

local lastInstanceId = nil
local stopScript = false

local function log(msg)
    if DEBUG_MODE then
        print("[AutoTeleport] " .. msg)
    end
end

local function getLocalPlayer()
    local player = Players.LocalPlayer
    while not player do
        task.wait(0.1)
        player = Players.LocalPlayer
    end
    return player
end

-- Fungsi update data instance ke backend (POST)
local function updateInstanceOnBackend(instanceId)
    local player = getLocalPlayer()
    local data = {
        userId = tostring(player.UserId),
        username = player.Name,
        instanceId = instanceId,
        placeId = tostring(game.PlaceId),
        gameId = "", -- optional, isi jika ada
        status = "active",
        timestamp = tostring(os.time() * 1000)
    }
    local jsonData = HttpService:JSONEncode(data)
    local success, result = pcall(function()
        return HttpService:PostAsync(UPDATE_INSTANCE_URL, jsonData, Enum.HttpContentType.ApplicationJson)
    end)
    if success then
        log("Instance updated on backend: " .. instanceId)
    else
        log("Failed to update instance: " .. tostring(result))
    end
end

-- Fungsi ambil instance terbaru (GET)
local function getLatestInstanceFromBackend()
    local success, response = pcall(function()
        return HttpService:GetAsync(GET_LATEST_INSTANCE_URL)
    end)
    if success then
        local data = HttpService:JSONDecode(response)
        if data and data.instanceId then
            return data.instanceId
        end
    end
    return nil
end

local function teleportToInstance(instanceId)
    local player = getLocalPlayer()
    if not player then return false end

    log("Teleporting to instance: " .. instanceId)
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, instanceId, player)
    end)
    if not success then
        log("Teleport failed: " .. tostring(err))
    end
    return success
end

local function mainLoop()
    local player = getLocalPlayer()
    local currentInstanceId = "init" -- dummy initial id

    -- Update instance pertama kali ke backend
    updateInstanceOnBackend(currentInstanceId)
    lastInstanceId = currentInstanceId

    while not stopScript do
        -- Cek instance terbaru
        local newInstance = getLatestInstanceFromBackend()

        if newInstance and newInstance ~= lastInstanceId then
            lastInstanceId = newInstance
            teleportToInstance(newInstance)
            break -- biasanya teleport akan pindah server, loop berhenti
        end

        task.wait(CHECK_INTERVAL)
    end
end

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.End then
        stopScript = true
        log("Script terminated manually.")
    end
end)

log("Auto Teleport started.")
task.spawn(mainLoop)
