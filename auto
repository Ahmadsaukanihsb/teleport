local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local TextChatService = game:GetService("TextChatService")

local REDIS_API_URL = "https://api-beta-mocha-45.vercel.app/api"
local PLACE_ID = 126884695634066
local CHECK_INTERVAL = 15
local CHAT_MESSAGE = "dsadadsadas"
local MAX_CHAT_PER_INSTANCE = 3
local TELEPORT_COOLDOWN = 30

local instanceChatCounts = {}
local lastTeleportAttempt = 0

-- Fungsi HTTP request dengan retry
local function makeHttpRequest(method, endpoint, body)
    local requestFunc = syn and syn.request or http and http.request or http_request or request
    if not requestFunc then
        warn("[makeHttpRequest] HTTP request function not found")
        return nil
    end

    local url = REDIS_API_URL .. endpoint
    local bodyEncoded = body and HttpService:JSONEncode(body) or nil

    for attempt = 1, 3 do
        local success, response = pcall(function()
            return requestFunc({
                Url = url,
                Method = method,
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = bodyEncoded
            })
        end)
        if success and response and (response.StatusCode == 200 or response.Status == 200) then
            return response
        else
            warn(string.format("HTTP request failed (attempt %d)", attempt))
            task.wait(1)
        end
    end

    return nil
end

local function safeTeleport(instanceId)
    if os.time() - lastTeleportAttempt < TELEPORT_COOLDOWN then
        print("‚è≥ Cooldown teleport, tunggu " .. (TELEPORT_COOLDOWN - (os.time() - lastTeleportAttempt)) .. " detik")
        return false
    end

    lastTeleportAttempt = os.time()
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(PLACE_ID, instanceId, Players.LocalPlayer)
    end)

    if not success then
        warn("Teleport error:", err)
    else
        print("üöÄ Teleporting ke instance:", instanceId)
    end

    return success
end

local function main()
    while true do
        local response = makeHttpRequest("GET", "/getInstanceId")
        if response then
            local success, data = pcall(HttpService.JSONDecode, HttpService, response.Body)
            if success and data and data.instanceId then
                local instanceId = data.instanceId

                if not instanceChatCounts[instanceId] then
                    instanceChatCounts[instanceId] = 0
                    print("üÜï Instance baru terdeteksi:", instanceId)
                end

                if instanceId == game.JobId then
                    local chatCount = instanceChatCounts[game.JobId] or 0
                    print("‚úÖ Berada di instance", game.JobId, "| Chat terkirim:", chatCount, "/", MAX_CHAT_PER_INSTANCE)

                    if chatCount >= MAX_CHAT_PER_INSTANCE then
                        print("üö´ Batas chat per instance tercapai.")
                    else
                        -- Ambil list userId dari server untuk instance ini
                        local userIdResponse = makeHttpRequest("GET", "/getUserIds?instanceId=" .. instanceId)
                        if userIdResponse and (userIdResponse.StatusCode == 200 or userIdResponse.Status == 200) then
                            local successIds, userData = pcall(HttpService.JSONDecode, HttpService, userIdResponse.Body)
                            if successIds and userData and type(userData.userIds) == "table" then
                                local localUserId = Players.LocalPlayer.UserId
                                -- Cek apakah userId local ada di list userId dari server
                                local isInSameServer = false
                                for _, userId in ipairs(userData.userIds) do
                                    if userId == localUserId then
                                        isInSameServer = true
                                        break
                                    end
                                end

                                if isInSameServer then
                                    local successSend, errSend = pcall(function()
                                        TextChatService.TextChannels.RBXGeneral:SendAsync(CHAT_MESSAGE)
                                    end)

                                    if successSend then
                                        instanceChatCounts[game.JobId] = chatCount + 1
                                        print("üí¨ Chat terkirim (" .. instanceChatCounts[game.JobId] .. "/" .. MAX_CHAT_PER_INSTANCE .. ")")
                                    else
                                        warn("Gagal mengirim chat:", errSend)
                                    end
                                else
                                    print("‚ùå UserId local tidak ditemukan di server database, skip chat.")
                                end
                            else
                                warn("Gagal parsing data userIds:", userIdResponse.Body)
                            end
                        else
                            warn("Gagal mendapatkan userIds dari server")
                        end
                    end
                else
                    print("üîÑ Instance baru tersedia, teleporting...")
                    if instanceChatCounts[game.JobId] then
                        instanceChatCounts[game.JobId] = nil
                    end
                    if safeTeleport(instanceId) then
                        task.wait(5)
                    end
                end
            else
                warn("Gagal parsing data instanceId:", response.Body)
            end
        else
            warn("Gagal mendapatkan instanceId dari server")
        end
        task.wait(CHECK_INTERVAL)
    end
end

local success, err = pcall(main)
if not success then
    warn("Script error:", err)
end
