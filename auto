local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local TextChatService = game:GetService("TextChatService")

-- Config
local REDIS_API_URL = "https://54bd-2001-448a-106e-4be8-56bb-76c9-5288-28b1.ngrok-free.app"
local PLACE_ID = 126884695634066
local CHECK_INTERVAL = 15
local MAX_CHAT_PER_INSTANCE = 3
local TELEPORT_COOLDOWN = 30
local CHAT_MESSAGE = "Hello from Roblox!"
local CHAT_RADIUS = 20 -- radius dalam studs untuk deteksi player lain

-- Local storage
local instanceChatCounts = {}
local lastTeleportAttempt = 0

-- Helpers
local function parseJsonSafely(jsonStr)
    local success, result = pcall(function()
        return HttpService:JSONDecode(jsonStr)
    end)
    return success and result or nil
end

local function makeHttpRequest(method, endpoint, body)
    local url = REDIS_API_URL .. endpoint
    local headers = {
        ["Content-Type"] = "application/json",
        ["ngrok-skip-browser-warning"] = "true"
    }
    local requestBody = body and HttpService:JSONEncode(body) or nil

    local success, response = pcall(function()
        return HttpService:RequestAsync({
            Url = url,
            Method = method,
            Headers = headers,
            Body = requestBody,
        })
    end)

    if not success then
        warn("HTTP request failed:", response)
        return nil
    end

    print("HTTP", response.StatusCode, endpoint)
    if response.StatusCode >= 400 then
        print("Response Body:", response.Body)
    end
    return response
end

local function fetchWithRetry(method, endpoint, body, maxRetries)
    local retries = 0
    while retries < (maxRetries or 3) do
        local res = makeHttpRequest(method, endpoint, body)
        if res and res.StatusCode == 200 then
            return res
        end
        retries += 1
        task.wait(2 ^ retries)
    end
    return nil
end

-- Fungsi ini sudah tidak dipakai, jadi dihapus atau dikomentari
-- local function updateUserInstance()
--     -- Tidak mengirim instance ke server
-- end

local function isValidInstanceId(instanceId)
    return instanceId and typeof(instanceId) == "string"
           and #instanceId > 10
           and instanceId ~= game.JobId
end

local function safeTeleport(instanceId)
    if os.time() - lastTeleportAttempt < TELEPORT_COOLDOWN then
        print("Teleport cooldown...")
        return false
    end

    lastTeleportAttempt = os.time()
    local success, err = pcall(function()
        local accessCode = tostring(math.random(10000, 99999))
        TeleportService:TeleportToPlaceInstance(PLACE_ID, instanceId, Players.LocalPlayer, {
            reservedServerAccessCode = accessCode
        })
    end)

    if not success then
        warn("Teleport failed:", err)
        return false
    end

    task.wait(10)
    return true
end

local function handleTeleportLogic(targetInstance)
    if not isValidInstanceId(targetInstance) then
        warn("Invalid target instance:", targetInstance)
        return false
    end

    print("ðŸ”„ Instance berbeda, teleporting ke", targetInstance)
    if instanceChatCounts[game.JobId] then
        instanceChatCounts[game.JobId] = nil
    end

    return safeTeleport(targetInstance)
end

-- Fungsi tambahan untuk cek player sekitar sebelum chat
local function isPlayerNearby()
    local localPlayer = Players.LocalPlayer
    local character = localPlayer.Character
    if not character or not character.PrimaryPart then
        return false
    end
    local localPos = character.PrimaryPart.Position

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character.PrimaryPart then
            local otherPos = player.Character.PrimaryPart.Position
            local distance = (localPos - otherPos).Magnitude
            if distance <= CHAT_RADIUS then
                return true
            end
        end
    end
    return false
end

local function handleChatLogic(instanceId, userId)
    if isPlayerNearby() then
        print("ðŸš« Player lain di sekitar, chat dibatalkan")
        return
    end

    local chatCount = instanceChatCounts[instanceId] or 0
    if chatCount >= MAX_CHAT_PER_INSTANCE then
        print("ðŸš« Batas chat tercapai untuk instance ini")
        return
    end

    pcall(function()
        TextChatService.TextChannels.RBXGeneral:SendAsync(CHAT_MESSAGE)
        instanceChatCounts[instanceId] = chatCount + 1
        print("ðŸ’¬ Mengirim chat (", instanceChatCounts[instanceId], "/", MAX_CHAT_PER_INSTANCE, ")")
    end)
end

-- Main loop
local function main()
    while task.wait(CHECK_INTERVAL) do
        -- Tidak lagi mengirim instance ke server, jadi hapus updateUserInstance
        -- if not updateUserInstance() then continue end

        local userId = Players.LocalPlayer.UserId
        local res = fetchWithRetry("GET", "/api/getInstanceId?userId="..userId, nil, 5)
        if not res or res.StatusCode ~= 200 then
            warn("Gagal mendapatkan instanceId dari server")
            continue
        end

        local data = parseJsonSafely(res.Body)
        if not data or not data.success then
            warn("Gagal parsing data instanceId:", res.Body)
            continue
        end

        if isValidInstanceId(data.instanceId) and data.instanceId ~= game.JobId then
            handleTeleportLogic(data.instanceId)
        else
            handleChatLogic(game.JobId, userId)
        end
    end
end

-- Start system
print("âœ… Sistem auto-joiner dimulai")
task.spawn(main)
