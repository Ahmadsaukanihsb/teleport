-- [AutoExec Logger Script - Delta & KRNL Compatible]
repeat task.wait() until game:IsLoaded()

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local currentInstanceId = game.JobId
local isRunning = true

local BACKEND_BASE_URL = "https://backend-vercel-ashy.vercel.app/api"
local REGISTER_URL = BACKEND_BASE_URL .. "/register.js"
local INSTANCE_URL = BACKEND_BASE_URL .. "/instance.js"
local BACKEND_SEND_URL = BACKEND_BASE_URL .. "/send.js"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"

local REPORT_INTERVAL = 300
local DEBUG_MODE = true
local MAX_RETRIES = 3
local RETRY_DELAY = 2

local function log(msg)
    if DEBUG_MODE then print("[Logger] " .. msg) end
end

-- Cek apakah RequestAsync tersedia (Delta = true, KRNL = false)
local function supportsRequestAsync()
    local ok = pcall(function()
        HttpService:RequestAsync({
            Url = "https://httpbin.org/get",
            Method = "GET"
        })
    end)
    return ok
end

local function sendWebhookFallback(message)
    local url = WEBHOOK_URL .. "?content=" .. HttpService:UrlEncode(message)
    pcall(function() game:HttpGet(url) end)
end

local function sendToBackend(payload)
    if not supportsRequestAsync() then
        -- KRNL fallback
        sendWebhookFallback("[KRNL] " .. payload)
        return
    end

    local body = { url = WEBHOOK_URL }
    if type(payload) == "string" then
        body.content = payload
    elseif type(payload) == "table" then
        for k, v in pairs(payload) do
            body[k] = v
        end
    else
        body.content = tostring(payload)
    end

    for i = 1, MAX_RETRIES do
        local success, res = pcall(function()
            return HttpService:RequestAsync({
                Url = BACKEND_SEND_URL,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = HttpService:JSONEncode(body)
            })
        end)
        if success and res.Success then return true end
        task.wait(RETRY_DELAY)
    end

    sendWebhookFallback("[Fallback] " .. body.content)
end

local function registerPlayer()
    if not supportsRequestAsync() then return false end
    local payload = {
        username = player.Name,
        userId = player.UserId,
        instanceId = currentInstanceId,
        placeId = game.PlaceId,
        gameId = game.GameId,
        timestamp = os.time()
    }

    for i = 1, MAX_RETRIES do
        local ok, res = pcall(function()
            return HttpService:RequestAsync({
                Url = REGISTER_URL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json",
                    ["X-Game-ID"] = tostring(game.GameId),
                    ["X-Player-ID"] = tostring(player.UserId)
                },
                Body = HttpService:JSONEncode(payload)
            })
        end)
        if ok and res.Success then return true end
        task.wait(RETRY_DELAY)
    end
    return false
end

local function updateInstanceStatus(status, extra)
    if not supportsRequestAsync() then return end

    local payload = {
        player = player.Name,
        userId = player.UserId,
        instanceId = currentInstanceId,
        placeId = game.PlaceId,
        gameId = game.GameId,
        status = status,
        timestamp = os.time()
    }
    if extra then
        for k, v in pairs(extra) do payload[k] = v end
    end

    pcall(function()
        HttpService:RequestAsync({
            Url = INSTANCE_URL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
                ["X-Game-ID"] = tostring(game.GameId),
                ["X-Player-ID"] = tostring(player.UserId)
            },
            Body = HttpService:JSONEncode(payload)
        })
    end)
end

local function periodicReporting()
    while isRunning do
        updateInstanceStatus("active")
        sendToBackend(string.format("PERIODIC_REPORT\nUserId: %d\nInstanceId: %s", player.UserId, currentInstanceId))
        task.wait(REPORT_INTERVAL)
    end
end

local function initialize()
    log("Logger started for " .. player.Name)
    sendToBackend("LOGGER_STARTED\nExecutor: " .. (supportsRequestAsync() and "Delta" or "KRNL"))

    if registerPlayer() then
        log("Player registered")
    else
        log("Register failed")
    end

    coroutine.wrap(periodicReporting)()

    updateInstanceStatus("script_started")
    sendToBackend("SCRIPT_STARTED")

    updateInstanceStatus("script_completed")
    sendToBackend("SCRIPT_COMPLETED")
end

local function shutdown()
    isRunning = false
    updateInstanceStatus("stopped")
    sendToBackend("LOGGER_STOPPED")
end

-- Tombol shutdown
UserInputService.InputEnded:Connect(function(input, processed)
    if input.KeyCode == Enum.KeyCode.End then
        shutdown()
    end
end)

-- Jalankan
local ok, err = pcall(initialize)
if not ok then
    updateInstanceStatus("init_fail", { error = tostring(err) })
    sendToBackend("INIT_FAILED\nError:\n```lua\n" .. tostring(err) .. "\n```")
end

-- Teleport compatibility
local teleportScript = "-- reload this script from AutoExec after teleport"
if queueonteleport then queueonteleport(teleportScript) end
