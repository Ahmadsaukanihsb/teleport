local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- ======= CONFIGURATION =======
local API_ENDPOINT = "https://api-beta-mocha-45.vercel.app/api/setInstanceId"
local WEBHOOK_URL = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"
-- =============================

local player = Players.LocalPlayer
local currentJobId = game.JobId
local playerName = player.Name

-- Improved HTTP request with retry logic
local function httpRequest(url, method, body, headers, retries)
    retries = retries or 3
    local requestFunc = syn and syn.request or http_request or request
    if not requestFunc then return nil end
    
    for i = 1, retries do
        local success, response = pcall(function()
            return requestFunc({
                Url = url,
                Method = method,
                Headers = headers or {
                    ["Content-Type"] = "application/json"
                },
                Body = body
            })
        end)
        
        if success and response then
            return response
        end
        wait(1) -- Wait before retrying
    end
    return nil
end

local function getBackpackContents()
    local contents = {}
    local backpack = player:FindFirstChild("Backpack")
    if not backpack then return "Backpack not found" end
    
    for _, item in ipairs(backpack:GetChildren()) do
        table.insert(contents, item.Name)
    end
    
    return #contents > 0 and table.concat(contents, ", ") or "Backpack empty"
end

local function updateInstanceInDatabase()
    local data = {
        instanceId = currentJobId,
        player = {
            userId = player.UserId,
            name = player.Name,
            accountAge = player.AccountAge
        },
        timestamp = os.time()
    }
    
    local response = httpRequest(API_ENDPOINT, "POST", HttpService:JSONEncode(data))
    
    if response and response.StatusCode == 200 then
        print("‚úÖ Successfully updated instance ID in database:", currentJobId)
        return true
    else
        warn("‚ùå Failed to update instance ID:", response and response.StatusCode or "No response")
        return false
    end
end

local function sendServerChangeNotification()
    local embed = {
        username = "Server Tracker",
        embeds = {
            {
                title = "üîÑ Server Change Detected",
                description = string.format("**%s** changed servers\n**New JobID:** `%s`", playerName, currentJobId),
                color = 16776960, -- Yellow
                timestamp = DateTime.now():ToIsoDate(),
                fields = {
                    {
                        name = "üë§ Player Info",
                        value = string.format("UserID: %d", player.UserId),
                        inline = true
                    },
                    {
                        name = "üì¶ Backpack",
                        value = getBackpackContents(),
                        inline = true
                    }
                },
                footer = {
                    text = "Auto Server Tracker v3.1"
                }
            }
        }
    }
    
    httpRequest(WEBHOOK_URL, "POST", HttpService:JSONEncode(embed))
end

-- Main function to handle server joins/changes
local function handleServerJoin()
    -- Update the instance ID in database (with retry logic)
    local attempts = 0
    local maxAttempts = 3
    local success = false
    
    while attempts < maxAttempts and not success do
        attempts += 1
        success = updateInstanceInDatabase()
        if not success then
            wait(2) -- Wait before retrying
        end
    end
    
    -- Send notification if successful
    if success then
        sendServerChangeNotification()
    else
        warn("‚ùå All attempts to update instance ID failed")
    end
end

-- Server change detection system
local function monitorServerChanges()
    local lastJobId = currentJobId
    
    while true do
        local newJobId = game.JobId
        if newJobId ~= lastJobId then
            print("üîÑ Detected server change:", lastJobId, "‚Üí", newJobId)
            currentJobId = newJobId
            lastJobId = newJobId
            handleServerJoin() -- Process the server change
        end
        wait(1) -- Check every second
    end
end

-- Initial execution
local success, err = pcall(function()
    handleServerJoin() -- Run for initial join
    monitorServerChanges() -- Start monitoring for changes
end)

if not success then
    warn("‚ùå Critical error in server tracker:", err)
end
