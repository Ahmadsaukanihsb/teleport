local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local TextChatService = game:GetService("TextChatService")

-- Configuration
local CHECK_INTERVAL = 5
local MAX_CLICK_ATTEMPTS = 5
local DEBUG_MODE = true -- Set to true to see detailed logs

-- Custom logging function
local function log(message)
    if DEBUG_MODE then
        print("[DEBUG] " .. os.date("%X") .. " - " .. message)
    end
end

-- Enhanced button finding with detailed logging
local function findAcceptButton()
    local gui = Players.LocalPlayer:WaitForChild("PlayerGui", 10)
    if not gui then
        log("PlayerGui not found")
        return nil
    end

    log("Searching for Accept button in PlayerGui...")
    
    local potentialButtons = {}
    
    -- Search through all ScreenGuis
    for _, screen in ipairs(gui:GetChildren()) do
        if screen:IsA("ScreenGui") and screen.Enabled then
            log("Checking ScreenGui: " .. screen.Name)
            
            for _, descendant in ipairs(screen:GetDescendants()) do
                -- Check for both TextButton and ImageButton
                if descendant:IsA("TextButton") or descendant:IsA("ImageButton") then
                    -- Case-insensitive check for "accept" in name or text
                    local buttonText = descendant:IsA("TextButton") and descendant.Text or ""
                    if string.find(string.lower(descendant.Name), "accept") or 
                       string.find(string.lower(buttonText), "accept") then
                       
                        log("Found potential button: " .. descendant:GetFullName())
                        table.insert(potentialButtons, descendant)
                    end
                end
            end
        end
    end

    -- Return the most likely candidate (prioritizing visible, active buttons)
    for _, button in ipairs(potentialButtons) do
        if button.Visible and button.Active then
            log("Selected button: " .. button:GetFullName())
            return button
        end
    end

    log("No valid Accept button found")
    return nil
end

-- Robust clicking function with multiple methods
local function clickButton(button)
    if not button then return false end
    
    log("Attempting to click button: " .. button:GetFullName())
    
    -- Method 1: Fire MouseButton1Click event if available
    local clickEvent = button:FindFirstChild("MouseButton1Click")
    if clickEvent then
        log("Trying MouseButton1Click event")
        local success = pcall(function()
            clickEvent:Fire()
        end)
        if success then
            log("Success via MouseButton1Click")
            return true
        end
    end

    -- Method 2: Fire Activated event if available
    local activatedEvent = button:FindFirstChild("Activated")
    if activatedEvent then
        log("Trying Activated event")
        local success = pcall(function()
            activatedEvent:Fire()
        end)
        if success then
            log("Success via Activated")
            return true
        end
    end

    -- Method 3: Simulate mouse click
    log("Trying simulated mouse click")
    local success = pcall(function()
        -- Get button position and size
        local absPos = button.AbsolutePosition
        local absSize = button.AbsoluteSize
        
        -- Calculate center point
        local centerX = absPos.X + absSize.X/2
        local centerY = absPos.Y + absSize.Y/2
        
        -- Double click for reliability
        for i = 1, 2 do
            UserInputService:SendMouseButtonEvent(centerX, centerY, 0, true, game, 1)
            task.wait(0.1)
            UserInputService:SendMouseButtonEvent(centerX, centerY, 0, false, game, 1)
            task.wait(0.2)
        end
    end)
    
    if success then
        log("Success via simulated click")
        return true
    end

    log("All click methods failed")
    return false
end

-- Main function with retry logic
local function main()
    log("Script started")
    
    while true do
        local button = findAcceptButton()
        
        if button then
            log("Attempting to click Accept button")
            
            -- Try multiple times with delays
            for attempt = 1, MAX_CLICK_ATTEMPTS do
                log("Attempt " .. attempt .. "/" .. MAX_CLICK_ATTEMPTS)
                
                if clickButton(button) then
                    log("Successfully clicked Accept button")
                    break
                end
                
                task.wait(1) -- Wait before retrying
            end
        else
            log("Accept button not found this cycle")
        end
        
        task.wait(CHECK_INTERVAL)
    end
end

-- Start with error handling
log("Initializing script...")
local success, err = pcall(main)
if not success then
    log("Fatal error: " .. tostring(err))
    warn("Script crashed: " .. tostring(err))
end
