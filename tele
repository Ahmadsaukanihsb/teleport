local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local TextChatService = game:GetService("TextChatService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- ======= CONFIGURATION =======
local REDIS_API_URL = "https://api-beta-mocha-45.vercel.app/api"
local PLACE_ID = 126884695634066  -- Replace with your game ID
local CHECK_INTERVAL = 15    -- Seconds between checks
local INSTANCE_TIMEOUT = 120 -- 2 minutes in seconds
local CHAT_MESSAGE = "dsadadsadas"  -- Message to send when in correct instance
-- =============================

-- More robust HTTP request function
local function makeHttpRequest(method, endpoint, body)
    -- Check for available request functions
    local requestFunc
    if syn and syn.request then
        requestFunc = syn.request
    elseif http_request then
        requestFunc = http_request
    elseif request then
        requestFunc = request
    else
        warn("No HTTP request function available")
        return nil
    end
    
    local url = REDIS_API_URL .. endpoint
    local requestData = {
        Url = url,
        Method = method,
        Headers = {
            ["Content-Type"] = "application/json"
        }
    }
    
    if body then
        requestData.Body = HttpService:JSONEncode(body)
    end
    
    local success, response = pcall(requestFunc, requestData)
    if not success then
        warn("HTTP request failed:", response)
        return nil
    end
    return response
end

-- Rest of your functions remain the same (getCurrentInstance, sendChatMessage, clickAcceptButton, handleInstance, etc.)
-- Make sure to keep all the other functions we defined previously

-- Modified main loop with better error handling
local function mainLoop()
    local lastCleanupTime = os.time()
    
    while true do
        -- Clean up old instances periodically
        if os.time() - lastCleanupTime > 60 then
            pcall(function()
                makeHttpRequest("POST", "/cleanupInstances", {timeout = INSTANCE_TIMEOUT})
            end)
            lastCleanupTime = os.time()
        end

        -- Check for new instance
        local newInstanceId = getCurrentInstance()
        
        if newInstanceId then
            local success, err = pcall(handleInstance, newInstanceId)
            if not success then
                warn("Error in handleInstance:", err)
            end
        else
            print("No new instances available, waiting...")
        end
        
        task.wait(CHECK_INTERVAL)
    end
end

-- Start with error recovery
local function startWithRetry()
    while true do
        local success, err = pcall(mainLoop)
        if not success then
            warn("Main loop error:", err)
            print("Restarting in 30 seconds...")
            task.wait(30)
        end
    end
end

-- Begin execution with additional safety checks
local success, err = pcall(startWithRetry)
if not success then
    warn("Fatal error in startup:", err)
end
